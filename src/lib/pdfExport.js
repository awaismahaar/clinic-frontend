import jsPDF from 'jspdf';

export const generateWhatsAppPDF = (customer, conversation) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  const addHeader = () => {
    doc.setFillColor(139, 69, 19);
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('Clinic CRM', margin, 25);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('WhatsApp Conversation History', pageWidth - margin, 25, { align: 'right' });
    
    yPosition = 60;
  };

  const addCustomerInfo = () => {
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Customer Information', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`Name: ${customer.contactFullName || customer.fullName}`, margin, yPosition);
    yPosition += 8;
    
    if (customer.contactPhoneNumber) {
      doc.text(`Phone: ${customer.contactPhoneNumber}`, margin, yPosition);
      yPosition += 8;
    }
    
    if (customer.department) {
      doc.text(`Department: ${customer.department}`, margin, yPosition);
      yPosition += 8;
    }
    
    yPosition += 10;
  };

  const addConversationHeader = () => {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Conversation History', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Total Messages: ${conversation.messages.length}`, margin, yPosition);
    doc.text(`Last Activity: ${new Date(conversation.lastMessageTimestamp).toLocaleString()}`, pageWidth - margin, yPosition, { align: 'right' });
    yPosition += 20;
  };

  const addMessage = (message) => {
    if (yPosition > pageHeight - 40) {
      doc.addPage();
      yPosition = margin;
    }

    const isUser = message.sender === 'user';
    const isNote = message.type === 'note';
    const timestamp = new Date(message.timestamp).toLocaleString();
    const sender = isNote ? 'Internal Note' : (isUser ? 'Agent' : 'Customer');
    
    if (isNote) {
      doc.setFillColor(255, 248, 220);
      doc.rect(margin, yPosition - 5, pageWidth - 2 * margin, 25, 'F');
    }
    
    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(isNote ? 184 : (isUser ? 34 : 59), isNote ? 134 : (isUser ? 197 : 130), isNote ? 11 : (isUser ? 94 : 246));
    doc.text(`${sender} - ${timestamp}`, margin + 5, yPosition + 5);
    
    yPosition += 12;
    
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0);
    const splitText = doc.splitTextToSize(message.text, pageWidth - 2 * margin - 10);
    doc.text(splitText, margin + 5, yPosition);
    yPosition += splitText.length * 5 + 10;
  };

  const addFooter = () => {
    const footerY = pageHeight - 15;
    doc.setFillColor(139, 69, 19);
    doc.rect(0, footerY - 5, pageWidth, 20, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by Clinic CRM', margin, footerY + 5);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin, footerY + 5, { align: 'right' });
  };

  addHeader();
  addCustomerInfo();
  addConversationHeader();
  
  conversation.messages.forEach(message => {
    addMessage(message);
  });

  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter();
    
    doc.setTextColor(128, 128, 128);
    doc.setFontSize(8);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 5, { align: 'center' });
  }

  return doc;
};

export const generateInstagramPDF = (customer, conversation) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  const addHeader = () => {
    doc.setFillColor(131, 58, 180);
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('Clinic CRM', margin, 25);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('Instagram Conversation History', pageWidth - margin, 25, { align: 'right' });
    
    yPosition = 60;
  };

  const addCustomerInfo = () => {
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Customer Information', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`Name: ${customer.contactFullName || customer.fullName}`, margin, yPosition);
    yPosition += 8;
    
    if (conversation.instagramUsername) {
      doc.text(`Instagram: @${conversation.instagramUsername}`, margin, yPosition);
      yPosition += 8;
    }
    
    yPosition += 10;
  };

  const addConversationHeader = () => {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Conversation History', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text(`Total Messages: ${conversation.messages.length}`, margin, yPosition);
    doc.text(`Last Activity: ${new Date(conversation.lastMessageTimestamp).toLocaleString()}`, pageWidth - margin, yPosition, { align: 'right' });
    yPosition += 20;
  };

  const addMessage = (message) => {
    if (yPosition > pageHeight - 40) {
      doc.addPage();
      yPosition = margin;
    }

    const isUser = message.sender === 'user';
    const timestamp = new Date(message.timestamp).toLocaleString();
    const sender = isUser ? 'Agent' : 'Customer';
    
    doc.setFontSize(9);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(isUser ? 88 : 253, isUser ? 81 : 29, isUser ? 216 : 29);
    doc.text(`${sender} - ${timestamp}`, margin + 5, yPosition + 5);
    
    yPosition += 12;
    
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0);
    const splitText = doc.splitTextToSize(message.text, pageWidth - 2 * margin - 10);
    doc.text(splitText, margin + 5, yPosition);
    yPosition += splitText.length * 5 + 10;
  };

  const addFooter = () => {
    const footerY = pageHeight - 15;
    doc.setFillColor(131, 58, 180);
    doc.rect(0, footerY - 5, pageWidth, 20, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by Clinic CRM', margin, footerY + 5);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin, footerY + 5, { align: 'right' });
  };

  addHeader();
  addCustomerInfo();
  addConversationHeader();
  
  conversation.messages.forEach(message => {
    addMessage(message);
  });

  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter();
    
    doc.setTextColor(128, 128, 128);
    doc.setFontSize(8);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 5, { align: 'center' });
  }

  return doc;
};

export const generateTicketPDF = (customer, ticket) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  let yPosition = margin;

  const addHeader = () => {
    doc.setFillColor(139, 69, 19);
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.text('Clinic CRM', margin, 25);
    
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.text('Support Ticket History', pageWidth - margin, 25, { align: 'right' });
    
    yPosition = 60;
  };

  const addCustomerInfo = () => {
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Customer Information', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`Name: ${customer.contactFullName || customer.fullName}`, margin, yPosition);
    yPosition += 8;
    
    if (customer.contactPhoneNumber) {
      doc.text(`Phone: ${customer.contactPhoneNumber}`, margin, yPosition);
      yPosition += 8;
    }
    
    if (customer.department) {
      doc.text(`Department: ${customer.department}`, margin, yPosition);
      yPosition += 8;
    }
    
    yPosition += 10;
  };

  const addTicketInfo = () => {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Ticket Information', margin, yPosition);
    yPosition += 15;

    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    doc.text(`Ticket ID: #${ticket.id.slice(-6)}`, margin, yPosition);
    yPosition += 8;
    
    doc.text(`Subject: ${ticket.subject}`, margin, yPosition);
    yPosition += 8;
    
    doc.text(`Status: ${ticket.status}`, margin, yPosition);
    doc.text(`Priority: ${ticket.priority}`, pageWidth - margin, yPosition, { align: 'right' });
    yPosition += 8;
    
    doc.text(`Created: ${new Date(ticket.createdAt).toLocaleString()}`, margin, yPosition);
    doc.text(`Agent: ${ticket.assignedAgent || 'Unassigned'}`, pageWidth - margin, yPosition, { align: 'right' });
    yPosition += 15;
  };

  const addDescription = () => {
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Description', margin, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    const splitDescription = doc.splitTextToSize(ticket.description, pageWidth - 2 * margin);
    doc.text(splitDescription, margin, yPosition);
    yPosition += splitDescription.length * 6 + 15;
  };

  const addNotes = () => {
    if (!ticket.notes || ticket.notes.length === 0) return;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Internal Notes', margin, yPosition);
    yPosition += 15;

    ticket.notes.forEach(note => {
      if (yPosition > pageHeight - 40) {
        doc.addPage();
        yPosition = margin;
      }

      doc.setFillColor(248, 250, 252);
      doc.rect(margin, yPosition - 5, pageWidth - 2 * margin, 20, 'F');
      
      doc.setFontSize(9);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(71, 85, 105);
      doc.text(`Note - ${new Date(note.createdAt).toLocaleString()}`, margin + 5, yPosition + 5);
      
      yPosition += 12;
      
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(0, 0, 0);
      const splitText = doc.splitTextToSize(note.text, pageWidth - 2 * margin - 10);
      doc.text(splitText, margin + 5, yPosition);
      yPosition += splitText.length * 5 + 15;
    });
  };

  const addFooter = () => {
    const footerY = pageHeight - 15;
    doc.setFillColor(139, 69, 19);
    doc.rect(0, footerY - 5, pageWidth, 20, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by Clinic CRM', margin, footerY + 5);
    doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - margin, footerY + 5, { align: 'right' });
  };

  addHeader();
  addCustomerInfo();
  addTicketInfo();
  addDescription();
  addNotes();

  const totalPages = doc.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    addFooter();
    
    doc.setTextColor(128, 128, 128);
    doc.setFontSize(8);
    doc.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 5, { align: 'center' });
  }

  return doc;
};

export const downloadPDF = (doc, filename) => {
  doc.save(`${filename}.pdf`);
};

export const getPDFBlob = (doc) => {
  return doc.output('blob');
};